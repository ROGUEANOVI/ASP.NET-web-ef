// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebEF.DbContexts;

#nullable disable

namespace WebEF.Migrations
{
    [DbContext(typeof(TaskContext))]
    [Migration("20230115002323_InitialData")]
    partial class InitialData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WebEF.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.ToTable("CATEGORIES", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("e361edbb-6c63-4ed3-b2e5-f32f5adef57c"),
                            Name = "Actividades Pendientes",
                            Weight = 20
                        },
                        new
                        {
                            CategoryId = new Guid("0f1ef1d9-1ea5-4196-bb59-9cf9a28dbabb"),
                            Name = "Actividades Personales",
                            Weight = 50
                        });
                });

            modelBuilder.Entity("WebEF.Models.Task", b =>
                {
                    b.Property<Guid>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaskPriority")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("TaskId");

                    b.HasIndex("CategoryId");

                    b.ToTable("TASKS", (string)null);

                    b.HasData(
                        new
                        {
                            TaskId = new Guid("ecdde551-9a9f-484e-9a23-7dd982fb7882"),
                            CategoryId = new Guid("e361edbb-6c63-4ed3-b2e5-f32f5adef57c"),
                            CreationDate = new DateTime(2023, 1, 14, 19, 23, 22, 739, DateTimeKind.Local).AddTicks(3523),
                            TaskPriority = 0,
                            Title = "Crear web app de prueba"
                        },
                        new
                        {
                            TaskId = new Guid("959ad597-82a6-49fa-a548-e679bdf3e72a"),
                            CategoryId = new Guid("e361edbb-6c63-4ed3-b2e5-f32f5adef57c"),
                            CreationDate = new DateTime(2023, 1, 14, 19, 23, 22, 739, DateTimeKind.Local).AddTicks(3538),
                            Description = "Diseñar modelo E/R de la base de datos del nuevo cliente",
                            TaskPriority = 2,
                            Title = "Diseñar modelo E/R"
                        },
                        new
                        {
                            TaskId = new Guid("3531ca67-ca17-4061-872b-ceb0d59f1d3b"),
                            CategoryId = new Guid("0f1ef1d9-1ea5-4196-bb59-9cf9a28dbabb"),
                            CreationDate = new DateTime(2023, 1, 14, 19, 23, 22, 739, DateTimeKind.Local).AddTicks(3542),
                            Description = "Ir a pedir el prestamo al banco",
                            TaskPriority = 2,
                            Title = "Ir al banco"
                        },
                        new
                        {
                            TaskId = new Guid("c1842460-d11f-447a-bdc1-ec751fd88b18"),
                            CategoryId = new Guid("0f1ef1d9-1ea5-4196-bb59-9cf9a28dbabb"),
                            CreationDate = new DateTime(2023, 1, 14, 19, 23, 22, 739, DateTimeKind.Local).AddTicks(3546),
                            Description = "Llevar la moto al lavadero",
                            TaskPriority = 1,
                            Title = "Lavar la moto"
                        });
                });

            modelBuilder.Entity("WebEF.Models.Task", b =>
                {
                    b.HasOne("WebEF.Models.Category", "Category")
                        .WithMany("Tasks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WebEF.Models.Category", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
